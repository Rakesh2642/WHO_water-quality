a <- 10
b <- 20
b <- 50
c <-a+b
q()
v1=c(1:5)
v2=c(6:10)
res=array(c(v1,v2),dim = c(2,2,4))
print(m)
print(res)
r=c("id-1","id-2")
c=c("n1","n2")
m=c("matrix-1","matrix-2","matrix-3","matrix-4")
result=array(c(v1,v2),dim=c(2,2,4),dimnames = list(r,c,m))
print(result)
v1=c(1:5)
v2=c(6:10)
res=array(c(v1,v2),dim = c(2,2,3))
print(res)
r=c("id-1","id-2")
c=c("n1","n2")
m=c("matrix-1","matrix-2","matrix-3")
result=array(c(v1,v2),dim=c(2,2,3),dimnames = list(r,c,m))
print(result)
result[,2,]
data("iris")
head("iris")
# numeric
x <- 5.7
y <- -2.3
# numeric
x <- 5.7
y <- -2.3
# integer
a <- 10L
b <- -3L
# complex
z <- 2 + 3i
# character/string
name <- "John Doe"
message <- 'Hello, World!'
# logical/Boolean
is_true <- TRUE
is_false <- FALSE
class(x)  # Outputs: "numeric"
class(y)  # Outputs: "numeric"
class(a)
class(b)
class(z)
class(name)
class(message)
class(is_true)
class(is_false)
source("~/.active-rstudio-document")
class(x)
class(y)
class(a)
class(b)
class(z)
class(name)
class(message)
class(is_true)
class(is_false)
remove(all)
remove(a)
remove(b)
renove(x,y,z)
renove(x)
renove(x)
remove(x)
remove(y,z)
remove(name,message,is_false,is_true)
x <- 10
if (x > 5) {
print("x is greater than 5")
}
x <- 10
if (x > 5) {
print("x is greater than 5")
}
remove(a)
remove(x)
a <- 10
if (a > 5) {
print("x is greater than 5")
}
remove(a)
x <- 3
x <- 3
if (x > 5) {
print("x is greater than 5")
} else {
print("x is less than or equal to 5")
}
x <- 7
x <- 7
if (x > 10) {
print("x is greater than 10")
} else if (x > 5) {
print("x is greater than 5 but less than or equal to 10")
} else {
print("x is less than or equal to 5")
}
remove(x)
for (i in 1:5) {
print(i)
}
remove(i)
x <- 1
repeat {
print(x)
x <- x + 1
if (x > 5) {
break
}
}
x <- 1
x <- 1
repeat {
print(x)
x <- x + 1
if (x > 5) {
break
}
}
x <- 1
repeat {
print(x)
x <- x + 1
if (x > 5) {
break
}
}
remove(x)
x <- 1
while (x <= 5) {
print(x)
x <- x + 1
}
remove(x)
x <- 3
result <- switch(x,
"case1" = {
# Action or value for case 1
"This is case 1."
},
"case2" = {
# Action or value for case 2
"This is case 2."
},
"case3" = {
# Action or value for case 3
"This is case 3."
},
{
# Default action or value if no cases match
"None of the cases matched."
}
)
remove(x)
remove(result)
str <- "Hello, World!"
length_str <- nchar(str)
length_str <- nchar(str)
str <- "Hello, World!"
length_str <- nchar(str)
remove(length_str)
str <- "Hello"
first_char <- substr(str, 1, 1)
str <- "Hello"
first_char <- substr(str, 1, 1)
remove(str)
remove(first_char)
str1 <- "Hello, World!"  # Using double quotes
str2 <- 'R Programming'  # Using single quotes
concatenated_str <- paste(str1, str2)  # Concatenating using paste()
remove(concatenated_str)
remove(str1)
remove(str2)
# Create a date object
date <- as.Date("2023-05-25")
# Print the date
print(date)
# Get the current system date
current_date <- Sys.Date()
# Print the current date
print(current_date)
# Extract components from a date
year <- format(date, "%Y")
month <- format(date, "%m")
day <- format(date, "%d")
# Print the components
print(year)
print(month)
print(day)
# Perform arithmetic operations with dates
future_date <- date + 7  # Add 7 days
past_date <- date - 3  # Subtract 3 days
# Print the calculated dates
print(future_date)
print(past_date)
# Calculate the difference between two dates
date1 <- as.Date("2023-05-20")
date2 <- as.Date("2023-05-30")
date_diff <- date2 - date1
# Print the difference in days
print(date_diff)
date <- as.Date("2023-05-25")
print(date)
current_date <- Sys.Date()
print(current_date)
year <- format(date, "%Y")
month <- format(date, "%m")
day <- format(date, "%d")
print(year)
print(month)
print(day)
future_date <- date + 7  # Add 7 days
past_date <- date - 3  # Subtract 3 days
print(future_date)
print(past_date)
date1 <- as.Date("2023-05-20")
date2 <- as.Date("2023-05-30")
date_diff <- date2 - date1
print(date_diff)
remove(current_date,data,date_diff,data1)
remove(current_date)
remove(data),date_diff,data1)
remove(data)
remove(date)
remove(date_diff),data1)
remove(data1)
remove(date1)
remove(date2)
remove(day)
remove(month)
remove(year)
remove(future_date)
remove(past_date)
install.packages("opencv")
install.packages("dlib")
install.packages("opencv")
install.packages("dlib")
install.packages("caffe")
install.packages("opencv")
install.packages("dlib")
install.packages("caffe")
library(opencv)
library(dlib)
# Load pre-trained models
face_detector <- dlib::get_frontal_face_detector()
# Load pre-trained models
face_detector <- dlib::get_frontal_face_detector()
gender_net <- cv::readNetFromCaffe("deploy.prototxt", "gender.caffemodel")
age_net <- cv::readNetFromCaffe("deploy.prototxt", "age.caffemodel")
# Read and preprocess the image
image <- cv::imread("image.jpg")
# Load pre-trained models
face_detector <- dlib::get_frontal_face_detector()
# Load pre-trained models
face_detector <- dlib::get_frontal_face_detector()
gender_net <- cv::readNetFromCaffe("deploy.prototxt", "gender.caffemodel")
age_net <- cv::readNetFromCaffe("deploy.prototxt", "age.caffemodel")
install.packages("opencv")
install.packages("dlib")
library(opencv)
library(dlib)
# Load pre-trained models
face_detector <- dlib::get_frontal_face_detector()
gender_net <- cv::readNetFromCaffe("deploy.prototxt", "gender.caffemodel")
install.packages("caffe")
# Load pre-trained models
face_detector <- dlib::get_frontal_face_detector()
gender_net <- cv::readNetFromCaffe("deploy.prototxt", "gender.caffemodel")
import pandas as pd
import numpy as np
import seaborn as sns
# read the csv file to check out the images and class
data = pd.read_csv("\Users\sony\Desktop\data science\R AGE\train.csv")
# read the csv file to check out the images and class
data = pd.read_csv(".\Users\sony\Desktop\data science\R AGE\train.csv")
# read the csv file to check out the images and class
data = pd.read_csv("Users\sony\Desktop\data science\R AGE\train.csv")
# read the csv file to check out the images and class
data = pd.read_csv("/Users/sony/Desktop/data science/R AGE/train.csv")
pd <- import("pandas")
library(reticulate)
install.packages("reticulate")
pd <- import("pandas")
import pandas as pd
# read the csv file to check out the images and class
data = pd.read_csv("/Users/sony/Desktop/data science/R AGE/train.csv")
import pandas as pd
# read the csv file to check out the images and class
data = pd.read_csv("/Users/sony/Desktop/data science/R AGE/train.csv")
library(reticulate)
pd <- import("pandas")
y
pd <- import("pandas")
y
pd <- import("pandas")
import pandas as pd
library(reticulate)
pd <- import("pandas")
# read the csv file to check out the images and class
data =read_csv("/Users/sony/Desktop/data science/R AGE/train.csv")
# read the csv file to check out the images and class
data =read.csv("/Users/sony/Desktop/data science/R AGE/train.csv")
View(data)
View(data)
pd <- import("pandas")
pd <- import("panda")
library(reticulate)
# Import pandas
pd <- import("pandas")
import pandas as pd
import pandas
pd <- import("panda")
install.packages("rcy2")
setwd("C:/Users/sony/Desktop/mam/Water quality2")
data <- read.csv("water_potability.csv")
str(data)
head(data)
dim(data)
summary(data)
library(dplyr)
# Identify columns with missing values
missing_columns <- colSums(is.na(data)) > 0
# Calculate the total count of missing values
total_missing_values <- sum(is.na(data))
library(zoo)
# Assuming your data frame is named 'water_data_clean'
# Replace missing values with the column medians
water_data_clean <- na.aggregate(data, FUN = median, na.rm = TRUE)
df <- water_data_clean
count <- sum(df$Trihalomethanes > 37)
count
count <- sum(df$Trihalomethanes > 100)
count
max(df$Trihalomethanes)
high_THM_values <- water_data[water_data$Trihalomethanes > 100, ]
high_THM_values <- df[df$Trihalomethanes > 100, ]
# Print the high THM values
print(high_THM_values)
View(high_THM_values)
View(high_THM_values)
count
# Read the CSV file
data <- read.csv("https://www.kaggle.com/datasets/adityakadiwal/water-potability")
View(data)
View(data)
setwd("C:/Users/sony/Desktop/mam/Water quality")
# Read the CSV file
data <- read.csv("water_potability.csv")
# Check the structure of the data
str(data)
head(data)
dim(data)
# Identify missing values
summary(data)
# Identify columns with missing values
missing_columns <- colSums(is.na(data)) > 0
# Calculate the total count of missing values
total_missing_values <- sum(is.na(data))
# Install and load the necessary packages
install.packages(c("zoo", "e1071", "randomForest", "rpart"))
library(zoo)
install.packages(c("zoo", "e1071", "randomForest", "rpart"))
library(e1071)
library(randomForest)
# Install and load the necessary packages
install.packages(c("zoo", "e1071", "randomForest", "rpart"))
library(zoo)
library(e1071)
library(randomForest)
library(rpart)
# Assuming your data frame is named 'water_data_clean'
# Replace missing values with the column medians
water_data_clean <- na.aggregate(data, FUN = median, na.rm = TRUE)
# Set the seed for reproducibility
set.seed(123)
train_index <- createDataPartition(water_data_clean$Potability, p = 0.8, list = FALSE)
install.packages(c("zoo", "e1071", "randomForest", "rpart"))
# K-Nearest Neighbors (KNN)
knn_model <- knn(train[, -10], test[, -10], train$Potability, k = 5)  # Decreased k from 12 to 5
# Install and load the necessary packages
install.packages(c("e1071", "randomForest", "rpart"))
install.packages(c("e1071", "randomForest", "rpart"))
library(e1071)
library(randomForest)
library(rpart)
# Assuming your data frame is named 'water_data_clean'
# Replace missing values with the column medians
water_data_clean <- na.aggregate(data, FUN = median, na.rm = TRUE)
# Set the seed for reproducibility
set.seed(123)
train_index <- createDataPartition(water_data_clean$Potability, p = 0.8, list = FALSE)
# Set the seed for reproducibility
set.seed(123)
train_index <- createDataPartition(water_data_clean$Potability, p = 0.8, list = FALSE)
library(caret)
train_index <- createDataPartition(water_data_clean$Potability, p = 0.8, list = FALSE)
train <- water_data_clean[train_index, ]
test <- water_data_clean[-train_index, ]
# Convert the response variable to factor for classification
train$Potability <- as.factor(train$Potability)
# Function to calculate accuracy percentage
percentage <- function(a) {
result <- a * 100
return(result)
}
# K-Nearest Neighbors (KNN)
knn_model <- knn(train[, -10], test[, -10], train$Potability, k = 5)  # Decreased k from 12 to 5
# K-Nearest Neighbors (KNN)
library(class)
knn_model <- knn(train[, -10], test[, -10], train$Potability, k = 5)  # Decreased k from 12 to 5
knn_acc <- mean(knn_model == test$Potability)
knn_percentage <- percentage(knn_acc)
print(knn_percentage)
# Naive Bayes
nb_model <- naiveBayes(Potability ~ ., train)
nb_pred <- predict(nb_model, test)
nb_acc <- mean(nb_pred == test$Potability)
nb_percentage <- percentage(nb_acc)
print(nb_percentage)
# Random Forest
rfModel <- randomForest(Potability ~ ., data = train, ntree = 100)  # Increased ntree from default value
rfPredictions <- predict(rfModel, newdata = test)
rfAccuracy <- mean(rfPredictions == test$Potability)
rf_percentage <- percentage(rfAccuracy)
print(rf_percentage)
# Decision Tree
treeModel <- rpart(Potability ~ ., data = train, cp = 0.001)  # Adjusted cp value for pruning
treePredictions <- predict(treeModel, newdata = test, type = "class")
treeAccuracy <- mean(treePredictions == test$Potability)
tree_percentage <- percentage(treeAccuracy)
print(tree_percentage)
# Create a data frame to store the accuracy values
model <- c("KNN", "Naive Bayes", "Random Forest", "Decision Tree")
accuracy <- c(knn_percentage, nb_percentage, rf_percentage, tree_percentage)
accuracy_df <- data.frame(model, accuracy)
print(accuracy_df)
